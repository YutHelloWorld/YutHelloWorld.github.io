<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[比较运算符&等号]]></title>
      <url>%2F2017%2F03%2F28%2Fcomparison-operators%2F</url>
      <content type="text"><![CDATA[译自：Airbnb JavaScript Style Guide原文地址：https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md 优先使用===和!==而不是==和!= 条件表达式例如 if 语句通过抽象方法 ToBoolean 强制计算它们的表达式并且总是遵守下面的规则： 对象 被计算为 true Undefined 被计算为 false Null 被计算为 false 布尔值 被计算为 布尔的值 数字 如果是 +0、-0、或 NaN 被计算为 false, 否则为 true 字符串 如果是空字符串 ‘’ 被计算为 false，否则为 true 1234if ([0]) &#123; // true // An array is an object, objects evaluate to true&#125; 使用简写 12345678910111213141516171819// badif (name !== '') &#123; // ...stuff...&#125;// goodif (name) &#123; // ...stuff...&#125;// badif (collection.length &gt; 0) &#123; // ...stuff...&#125;// goodif (collection.length) &#123; // ...stuff...&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端生态资源集]]></title>
      <url>%2F2017%2F03%2F02%2Ffront-end-resource%2F</url>
      <content type="text"><![CDATA[ES6 Webpack React React-Router es6-cheatsheet WebpackTutorial React React-Router中文 ECMAScript 6 入门 Webpack-demos React-Demos React-Router官方示例库 Redux UI框架 规范 脚手架 Redux中文 antd eslint中文 react脚手架 极好的精简Redux教程 amazeui-react Airbnb JavaScript Style Guide — — material-ui — — — ant-mobile — —]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WebStorm常见问题汇总]]></title>
      <url>%2F2017%2F01%2F16%2Fwebstorm-scheme%2F</url>
      <content type="text"><![CDATA[The smartest JavaScript IDE Lightweight yet powerful IDE, perfectly equipped for complex client-side development and server-side development with Node.js WebStorm是一款能够大幅提高前端开发效率的IDE，你可以自由的设置快捷键，可以体验到各种神奇的功能。本文介绍一些常见的WebStorm设置问题解决办法。 安装 从官网 下载最新版安装包 官方试用30天，这里给出破解方法😏，选择Lisence Server，输入：http://idea.imsxm.com 更多破解方法 主题与插件主题及插件下载 一些设置Terminal字体 Preferences &gt; Editsor &gt; Colors &amp; Fonts &gt; Console Font 禁止实时自动保存 Preferences &gt; Apearance &amp; Behavior &gt; System Settings 取消勾选 “Save files on frame deactivation”和”Save files automatically if application is idle for” 未保存时显示星星标记 Preferences &gt; Editor &gt; General &gt; Editor Tabs 勾选 “Mark modified tabs with asterisk” 鼠标双击选中驼峰式命名的变量 Preferences &gt; Editor &gt; General 取消勾选 Honor “CameHumps” words settings when selecting on double click Preferences &gt; Editor &gt; General &gt; Smart Keys 勾选 Use “CameHumps” words 常用功能快捷操作收藏标记代码某行和查找已标记的行收藏快捷键：F3跳转至收藏的行: command+F3]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何判断数据类型]]></title>
      <url>%2F2016%2F12%2F19%2Ftypeof%2F</url>
      <content type="text"><![CDATA[JavaScript数据类型字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）。 判断数据类型的方法toString.call(obj)方法可以输出一个字符串结果来判断数据类型 12var arr=[1,2];toString.call(arr); [Object Array]同理， jQuery type方法jQuery提供了一系列判断数据类型的API$.isFunction判断是否是一个函数方法,返回一个布尔值12var foo = function()&#123;&#125;;$.isFunction(foo); //true $.isNumeric判断是否是数字$.isPlainObject判断是否是对象$.isWindow判断是否是个window对象$.isArray判断是否是个数组$.isEmptyObject判断是否是空对象$.type获取变量数据类型，返回一个字符串]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTML5新特性]]></title>
      <url>%2F2016%2F11%2F15%2Fhtml5%2F</url>
      <content type="text"><![CDATA[概述在做移动端Web页面时，常常使用到一些HTML5的新特特性。而HTML5的设计目的是为了在移动设备上支持多媒体。经常有些同学问到相关的问题，这里做些详细全面的总结，不定期的更新。 新特性 用于绘画的canvas元素 用于媒介回放的 video 和 audio 元素 对本地离线存储的更好的支持 新的特殊内容元素，比如article、footer、header、nav、section 新的表单控件，比如calendar、date、time、email、url、search 简洁的DOCTYPEHTML5 只有一个简单的文档类型：&lt;!DOCTYPE html&gt;。它不使用版本，因此该文档类型适用所有版本的HTML。 简单易记的语言标签你并不需要在&lt;html&gt;中使用xmlns 或xml:lang标记。&lt;html lang=”en”&gt;将对HTML5 有效。 简单易记的编码类型你现在可以在meta 标签中使用’charset’：&lt;meta charset=”utf-8″ /&gt; 具有boolean值的属性12345678&lt;!-- 只写属性不写属性值代表属性为true --&gt;&lt;input type="checkbox" checked&gt;&lt;!-- 不写属性代表属性为false --&gt;&lt;input type="checkbox"&gt;&lt;!-- 属性值=属性名,代表属性为true --&gt;&lt;input type="checkbox" checked="checked"&gt;&lt;!-- 属性值=空字符串，代表属性为true --&gt;&lt;input type="checkbox" checked=""&gt; HTML5的基本布局1234567&lt;article&gt; &lt;header&gt;&lt;/header&gt; &lt;section&gt;&lt;/section&gt; &lt;section&gt;&lt;/section&gt; &lt;aside&gt;&lt;/aside&gt; &lt;footer&gt;&lt;/footer&gt;&lt;/article&gt; &lt;article&gt; 元素代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容，与上下文不相关的独立内容 &lt;section&gt; 表示页面中的一个内容区块，比如章节、页眉、页脚或页面中的其他部分 不要为没有标题的内容区块使用section元素 &lt;nav&gt; 表示页面中导航链接的部分，例如：传统导航条，侧边栏导航，页内导航，翻页等 &lt;aside&gt; 表示article元素的内容之外的、与article元素的内容相关的辅助信息，它可以包含与当前页面或主要内容相关的引用、侧边栏、广告、导航条，以及其他类似的有别于主要内容的部分 &lt;header&gt; 表示页面中一个内容区块或整个页面的标题 &lt;hgroup&gt; 将标题及其子标题进行分组的元素。hgroup元素通常会将h1-h6元素进行分组，譬如一个内容区块的标题及其子标题算一组。 1234&lt;hgroup&gt; &lt;h1&gt;文章主标题&lt;/h1&gt; &lt;h2&gt;文章子标题&lt;/h2&gt;&lt;/hgroup&gt; 一个普通的Html5页面结构会如下所示：12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;title&gt;标题&lt;/title&gt; &lt;body&gt; &lt;header&gt;&lt;/header&gt; &lt;nav&gt;导航&lt;/nav&gt; &lt;article&gt; &lt;section&gt;区块&lt;/section&gt; &lt;/article&gt; &lt;aside&gt;侧边栏&lt;/aside&gt; &lt;footer&gt;页脚&lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; HTML5对表单的增强Html5新增了多个控件类型，如输入网址的url类型，输入电子邮箱地址的email类型，用于输入日期的date类型，更有用于输入颜色的color类型等等。更为神奇的是这些类型还内建表单验证，如required属性就说明该表项不能为空，max属性提供了该表项输入允许的最大值，当然在Html4中这些功能也可以通过javascript来实现，但是的内建在Html5中的表单验证优越性不言而喻。需要注意的是，现在Html5的输入类型还没有被所有浏览器所支持。 感兴趣的同学可以测试下面的代码：1234567&lt;form&gt; Email:&lt;input type="email" required /&gt;&lt;/br&gt; Number:&lt;input type="number" max="10" /&gt;&lt;/br&gt; Date :&lt;input type="date"&gt;&lt;/br&gt; File:&lt;input type="file" accept="image/png" /&gt;&lt;/br&gt; &lt;input type="submit"&gt;&lt;/form&gt; input标签新增的TYPE:123456789101112date - 选取日、月、年month - 选取月、年week - 选取周和年time - 选取时间（小时和分钟）datetime - 选取时间、日、月、年（UTC 时间）datetime-local - 选取时间、日、月、年（本地时间）range－数字范围选择number－填写数字url-url地址email-邮件color-颜色选取search-搜索 视频和音频的支持视频的支持带控制器的视频播放器12345678&lt;video src="movie.mp4" controls="controls"&gt;&lt;/video&gt;/*如果考虑到不同浏览器对视频文件的兼容性*/&lt;video width="320" height="240" controls="controls"&gt; &lt;source src="movie.ogg" type="video/ogg"&gt; &lt;source src="movie.mp4" type="video/mp4"&gt; &lt;p&gt;Your browser does not support the video tag.&lt;/p&gt;&lt;/video&gt; video 元素允许含有多个 source 元素。source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式： 如果浏览器支持video元素，也支持H264（mp4格式），那么就使用第一个视频； 如果浏览器支持video元素，不支持H264（mp4格式）但支持Ogg，那么用第二个视频； 如果浏览器不支持video元素，那么就播放Flash； 如果浏览器不支持video元素，也不支持Flash，那么就给出了下载链接。 属性 值 说明 autoplay autoplay 如果出现该属性，则视频在就绪后马上播放。 controls controls 如果出现该属性，则向用户显示控件，比如播放按钮。 loop loop 如果出现该属性，则当媒介文件完成播放后再次开始播放。 muted muted 规定视频的音频输出应该被静音。 poster URL 规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。 preload preload 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。 src url 要播放的视频的 URL width pixels 设置视频播放器的宽度。 height pixels 设置视频播放器的高度。 音频的支持1&lt;audio src="song.ogg" controls="controls"&gt;&lt;/audio&gt; 如果考虑到不同浏览器对视频文件的兼容性12345&lt;audio width="320" height="240" controls="controls"&gt; &lt;source src="song.ogg" type="audio/ogg"&gt; &lt;source src="song.mp3" type="audio/mpeg"&gt; &lt;p&gt;Your browser does not support the audio tag.&lt;/p&gt;&lt;/audio &gt; 属性 值 说明 autoplay autoplay 如果出现该属性，则音频在就绪后马上播放。 controls controls 如果出现该属性，则向用户显示控件，比如播放按钮。 loop loop 如果出现该属性，则每当音频结束时重新开始播放。 preload preload 如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。 src url 要播放的音频的 URL 本地存储一提到存储，大家可能第一时间想到的是本地的文件存储，服务端的数据库存储等。那么html5时代，我们的存储是否会有更多选择呢？答案是肯定的。 关于存储在html5之前的存储方式： cookies诞生 通过http请求头带到不同页面上 一个域名下的cookie大小限制为4k（谷歌火狐不限制大小，但数量过多同样会有问题） 主域名污染，子域名的请求，都会把主域名的cookie带上。 (可以比较qq.com和y.qq.com的cookie比较document.cookie=”lesson=html5;path=/;domain=qq.com”) UserData 只有IE才支持 xml文件 HTML的web存储方法HTML5 提供两种web存储方法，localStorage 与 sessionStorage1234- 解决了存储大小的问题- 解决了请求头臃肿的问题- 跨浏览器- 键值对的形式进行存储 localStorage 与 sessionStorage 区别过期时间：12localStorage没有过期时间，只要不clear或remove，数据会一直保存。sessionStorage 针对一个session进行数据存储，生命周期与session相同，当用户关闭浏览器后，数据将被删除。 大小：1localStorage标准大小限制为5M 在使用 web 存储前,应检查浏览器是否支持 localStorage 和sessionStorage:123456if(typeof(Storage)!=="undefined")&#123;// 是的! 支持 localStorage sessionStorage 对象!// 一些代码.....&#125;else&#123;// 抱歉! 不支持 web 存储。&#125; 两者特点：localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等 localStorage和sessionStorage的方法 setItem存储value 用途：将value存储到key字段 用法：.setItem( key, value) 代码示例： 12sessionStorage.setItem("key", "value");localStorage.setItem("site", "js8.in"); getItem获取value 用途：获取指定key本地存储的值 用法：.getItem(key) 代码示例： 12var value = sessionStorage.getItem("key");var site = localStorage.getItem("site"); removeItem删除key 用途：删除指定key本地存储的值 用法：.removeItem(key) 代码示例： 12sessionStorage.removeItem("key");localStorage.removeItem("site"); clear清除所有的key/value 用途：清除所有的key/value 用法：.clear() 代码示例： 12sessionStorage.clear();localStorage.clear(); 如果要保存非字符串的内容，建议使用JSON来处理。 写入数据时用JSON.stringify转成字符串 12var data = &#123;a:1,b:2,c:3&#125;;localStorage.setItem("data",JSON.stringify(data)); 读取数据时用JSON.parse把字符串转为之前的格式。 12var JasonString =localStorage.getItem(&quot;data&quot;);console.log(JSON.parse(JasonString)); storage事件storage还提供了storage事件，当键值改变或者clear的时候，就可以触发storage事件，如下面的代码就添加了一个storage事件改变的监听：12345678910111213141516//可以通过添加storage侦听，来监测本地存储数据的变化if(window.addEventListener)&#123; window.addEventListener("storage",handle_storage,false);&#125;else if(window.attachEvent)&#123; window.attachEvent("onstorage",handle_storage);&#125;function handle_storage(e)&#123; if(!e)&#123;e=window.event;&#125; var status = &#123;&#125;; status.key = event.key; status.oldValue = event.oldValue; status.newValue = event.newValue; status.url = event.url; status.storage = event.storageArea; console.log(status);&#125; storage事件对象的具体属性如下表: storageArea: 表示存储类型（Session或Local） key:发生改变项的key oldValue: key的原值 newValue: key的新值 url*: key改变发生的URL]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Javascript OOP 继承与原型链详解]]></title>
      <url>%2F2016%2F11%2F06%2Fjs-oop%2F</url>
      <content type="text"><![CDATA[什么是OOP？面向对象程序设计（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的程序编程范型，同时也是一种程序开发的方法。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。 原型对于那些熟悉基于类的面向对象语言（Java 或者 C++）的开发者来说，JavaScript 的语法是比较怪异的，这是由于 JavaScript 是一门动态语言，而且它没有类的概念（ ES6 新增了class 关键字，但只是语法糖，JavaScript 仍旧是基于原型）。 涉及到继承这一块，Javascript 只有一种结构，那就是：对象。在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。 虽然，原型继承经常被视作 JavaScript 的一个弱点，但事实上，原型继承模型比经典的继承模型更强大。举例来说，在原型继承模型的基础之上建立一个经典的继承模型是相当容易的。 __proto____proto__是对象的一个内部隐藏属性，它的值是该对象的原型。__proto__属性可用于获取对象的原型。1234var obj = &#123;x:1&#125;;//var obj = new Object();obj.x = 1;obj obj.__proto__ === Object.prototype;Object.getPrototypeOf(obj) === Object.prototype 从 ECMAScript 6 开始，Object.getProtoypeOf(obj)方法返回指定对象的原型（也就是该对象内部属性[[prototype]]的值）,Object.setProtoypeOf(obj, prototype)将一个指定的对象的原型设置为另一个对象或者null(既对象的[[Prototype]]内部属性). 构造函数的prototype属性 JavaScript 不包含传统的类继承模型，而是使用 prototype 原型模型。 12function Foo()&#123;&#125;Foo.prototype 我们创建的每一个函数都会有prototype预设属性，Foo.prototype是一个对象。Foo.protoytype结构：12345Foo.prototype&#123; constructor: function Foo(), __proto__: Object.prototype，&#125; 通常，我们说Foo.prototype就是Foo的原型。Object构造函数用来创建对象。 我们看到，Foo.prototype中包含construtor属性和__proto__属性，contructor就是构造函数Foo本身，__proto__属性指向对象原型。 对象原型Object.prototype包含了一些方法如 tostring, valueOf 。 如何为Foo的原型添加属性添加属性方法只需123Foo.prototype.sayHi=function()&#123; console.log('Hi');&#125; 这样所有构造函数Foo new出来的实例都会有sayHi属性 构造函数Foo与new一个实例123456789function Foo()&#123; this.x = 1;&#125;var foo = new Foo();Foo.prototype.sayHi=function()&#123; console.log('Hi');&#125;foo.x; //1foo.sayHi(); //Hi 实例foo的原型就是Foo.prototype 原型链一个例子1234567891011121314151617181920212223242526272829303132function Person(name,age)&#123; this.name = name; this.age = age;&#125;Person.prototype.hi=function()&#123; console.log('Hi,my name is',this.name,",I'm",this.age,'years old now.')&#125;;Person.prototype.LEGS_NUM = 2;Person.prototype.ARMS_NUM = 2;Person.prototype.walk = function()&#123; console.log(this.name,'is walking..');&#125;;function Student(name,age,className)&#123; Person.call(this,name,age); this.className = className;&#125;/*使用Object.create一个新的对象，如果Student.prototype=Person.prototype,会导致Student.prototype增加属性时，Person.prototype也增加*/Student.prototype = Object.create(Person.prototype);/*上一步时Student.prototype的constructor变为了Person,这里要重新设置为Student*/Student.prototype.constructor = Student;Student.prototype.hi = function()&#123; console.log('Hi,my name is',this.name,",I'm",this.age,'years old now,and from',this.className,'.');&#125;;Student.prototype.learn = function(subject)&#123; console.log(this.name,'is learning',subject,'at',this.className,'.');&#125;;//testvar bson = new Student('bson',27,'Class 3,Grade 2');bson.hi(); //Hi,my name is bson,I'm 27 years old now,and from Class3 Grade 2.console.log(bson.LEGS_NUM); //2bson.walk(); //bson is walking..bson.learn('math'); //bson is learning math at Class 3 Grade 2. 我们看下以上代码的流程，首先构造函数Person并给其原型添加一系列属性（如hi），然后构造函数Student,并将Foo的属性应用到Student,再通过12Student.prototype = Object.create(Person.prototype);Student.prototype.constructor = Student; 继承Person的原型。Object.create在ECMAScript 5才有，之前的版本，我们可以自行构造这个方法1234567if(!Object.create)&#123; Object.create = function(proto)&#123; function F()&#123;&#125;; F.prototype = proto; return new F(); &#125;&#125; 根据控制台信息，很容易看出实例 bson 通过__proto__指向 Student.prototype ,而Student.prototype 通过__proto__指向 Person.prototype ,Person.prototype 通过__proto__指向 Object.prototype 。这就是一条原型链。原型链上的所有方法 bson都可以调用。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[The-Chainsmoker-Closer]]></title>
      <url>%2F2016%2F11%2F06%2Fvideo-The-Chainsmoker%2F</url>
      <content type="text"><![CDATA[Video]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Windows下Node.js开发环境搭建]]></title>
      <url>%2F2016%2F10%2F16%2Fnodejs%2F</url>
      <content type="text"><![CDATA[在生产环境中，Node.js应用大多部署在linux环境下。这里我们采用虚拟机VM+windows来搭建一个Node.js开发环境。 环境软件清单 VirtualBox 虚拟机CentOS安装 xShell与xFtp Node.js MongoDB Redis Sublime Text WebStorm VirtualBox安装下载进入官方下载地址，下载windows对应版本然后安装启动。 虚拟机创建选择linux系统，其他64位，下一步注意:有的电脑无法创建64位虚拟机，给出的选项只有32位,这是由于64bit的虚拟机需要硬件虚拟化支持,BIOS 默认将它关掉了，去BIOS设置中 将 virtualization 这个选项设置为enable就可以了。设置内存1024M，下一步创建默认格式的硬盘，为节省空间，选择“动态分配”。创建完毕 CentOS安装进入官方下载地址，下载DVD ISO进入刚才创建的虚拟机，点击设置-存储，通过光驱安装CentOS 7网络设置：选择桥接网卡启动虚拟机，开始安装CentOS语言选择English选择需要安装的软件选择硬盘，需要先取消再勾选 虚拟机环境配置网卡配置1vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 安装epel1yum install epel-release 安装nodejs1yum install nodejs 安装mongoDB服务器端1yum install mongodb-server 安装mongoDB客户端1yum install mongodb linux常用命令清除控制台：1clear 新建文件夹(层级)：1mkdir -p /home/test 删除文件：1rm file 删除文件夹：1rm -r /home/test 清空文件夹：1rm -rf /home 列出所有文件:1ls 查看网卡配置：1ifconfig 重启网卡：1systemctl restart network 关闭防火墙：1sudo systemctl stop firewalld.service 关闭防火墙的开机启动：1sudo systemctl disable firewalld.service mongoDB常用操作命令启动mongod1mongod --dbpath=/data/db --port=27017 --fork --logpath=/var/log/mongd.log 注意： 运行mongoose模块前，必须启动mongod 关闭mongod1mongod --shutdown 进入数据库1mongo 数据库索引1show dbs 切换到某个db1use aiyo db目录1show collections 查找users下数据1db.users.find() npm 淘宝镜像12npm config set strict-ssl falsenpm install -g cnpm --registry=https://registry.npm.taobao.org express安装express generator1cnpm install -g express-generator 生成express模板 expressHello123express expressHellocd expressHellocnpm install express --save 运行123DEBUG=expressHello npm start#或者node ./bin/www]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Div Resize方法]]></title>
      <url>%2F2016%2F08%2F24%2Fresize%2F</url>
      <content type="text"><![CDATA[当一个&lt;div&gt;需要实现resize时，除了使用jQuery UI 的resizable插件，也可以自己编写JS实现，这时就需要用到js的mousedown,mousemove,mouseup事件，源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;draw&lt;/title&gt; &lt;script src="js/jquery-1.11.0.min.js"&gt;&lt;/script&gt; &lt;style&gt; #drawBorder&#123; width:600px; height:2px; background: deeppink; cursor: n-resize; margin:-10px auto 0 auto; border-bottom:10px solid transparent ; border-top:10px solid transparent; -webkit-background-clip: padding-box; -moz-background-clip: padding-box; background-clip: padding-box; &#125; #content&#123; width:600px; height:300px; margin:0 auto; border:1px solid deeppink; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="content"&gt;&lt;/div&gt; &lt;div id="drawBorder"&gt;&lt;/div&gt; &lt;script&gt; $("#drawBorder").mousedown(function () &#123; var mouseDownY=$(this).offset().top; //鼠标点击下边缘时，下边缘距离窗口顶端的高度。 var contentHeight=$("#content").height(); $(document).mousemove(function (e) &#123; var currentHeight=contentHeight+e.clientY-mouseDownY; //e.clientY为鼠标移动时Y轴坐标,currentHeight为当前高度 $("#content").height(currentHeight+"px"); //重置高度 &#125;); &#125;); $(document).mouseup(function()&#123; $(document).unbind("mousemove"); //鼠标弹起时，解除`movemove`事件的监听 &#125;); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css transparent的应用]]></title>
      <url>%2F2016%2F08%2F23%2Ftransparent%2F</url>
      <content type="text"><![CDATA[transparenttransparent 的字面意思就是透明。它用来表示一个完全透明的颜色，即该颜色看上去将是背景色。也可以理解为它是 rgba(0,0,0,0) 的简写。 值得注意的是: 在 CSS3 之前，transparent 关键字不是一个真实的颜色，只能用于 background-color 和 border-color中，表示一个透明的颜色。而在支持 CSS3 的浏览器中，它被重新定义为一个真实的颜色，transparent 可以用于任何需要 color 值的地方，像 color 属性。那么这个透明值有什么用呢？简单列举一些例子： transparent 用于 border，绘制三角形这算是 transparent 最常见的一个用法，用于绘制三角形。 12&lt;div class='div1'&gt;&lt;/div&gt;&lt;div class='div2'&gt;&lt;/div&gt; 1234567891011121314151617.div1&#123; width:0px; height:0px; margin:20px auto; border-top:50px solid yellowgreen; border-bottom:50px solid deeppink; border-left:50px solid bisque; border-right:50px solid chocolate;&#125;.div2&#123; width:0px; height:0px; margin:20px auto; border-bottom:50px solid deeppink; border-left:50px solid transparent; border-right:50px solid transparent;&#125; transparent 用于 border，实现增大点击热区按钮是我们网页设计中十分重要的一环，而按钮的设计也与用户体验息息相关。让用户更容易的点击到按钮无疑能很好的增加用户体验，尤其是在移动端，按钮通常都很小，但是有时由于设计稿限制，我们不能直接去改变按钮元素的高宽。那么这个时候有什么办法在不改变按钮原本大小的情况下去增加他的点击热区呢？ 这里，借助透明的 border 可以轻松帮我们实现，利用一层透明的 border:20px solid transparent 我们可以这样写： 1&lt;div&gt;Btn&lt;/div&gt; 123456789101112131415161718div&#123; width:140px;line-height:48px; text-align:center; margin:50px auto; color:#333; cursor:pointer; background:hsl(200, 60%, 60%); border:20px solid transparent; background-clip: padding-box;&#125;div:hover&#123; background:hsl(100, 60%, 50%); background-clip: padding-box;&#125;div:active&#123; background:hsl(300, 60%, 70%); background-clip: padding-box;&#125; 然而真实情况是有的时候我们的按钮必须要用到 border，而 border 又只能设置一重（无法像 box-shadow和 渐变一样设置多重 border），这个时候如果还需要运用这种方法，可以使用内阴影 box-shadow 模拟一层 border，像这样： 1&lt;div&gt;Btn&lt;/div&gt; 12345678910111213141516171819202122div&#123; width:140px; line-height:48px; text-align:center; margin:50px auto; color:hsla(328, 100%, 54%,0.8); cursor:pointer; border:20px solid transparent; background-clip: padding-box; box-shadow:inset 0 0 0 1px hsla(328, 100%, 54%,0.8);&#125;div:hover&#123; background:hsla(328, 100%, 54%,0.8); color:white; background-clip: padding-box;&#125;div:active&#123; background:hsla(328, 100%, 54%,1); color:white; background-clip: padding-box;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[闭包]]></title>
      <url>%2F2016%2F08%2F21%2Fclosure%2F</url>
      <content type="text"><![CDATA[闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。换句话说，这些函数可以“记忆”它被创建时候的环境。 变量作用域考虑如下情况： 12345var foo= function () &#123; var a=1;&#125;;foo();console.log(typeof(a)); //undefined 函数foo()创建了一个局部变量a，仅在函数内部可以访问。 再考虑一种情况： 12345function outer() &#123; var localVal = 1; return localVal;&#125;outer(); //1 执行函数outer()后，localVal被释放。 闭包现在来看一个有意思的例子 123456789function outer()&#123; var localValue = 1; function getLocalValue()&#123; return localValue; &#125; return getLocalValue;&#125;var func = outer();func(); //1 函数outer()创建了一个局部变量localValue，和一个函数getLocalValue()。在执行语句var func = outer()过后，我们可能会认为localValue就无法被访问到了。然而事实并非如此，执行func()仍然能够访问到变量localValue 。 造成这个现象的原因就是func变成了一个闭包。闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。在这个例子中，func是一个闭包，由getLocalValue和localValue组成。 闭包的应用我们有意识或无意识地都使用到了闭包，比如DOM的绑定事件 1234567function clickEvent()&#123; var localData = 'localData Here'; document.addEventListener('click',function()&#123; console.log(localData); &#125;)&#125;;clickEvent(); 当点击页面时，就访问到了创建闭包时的局部变量localData。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[浅谈CSS中float、inline-block、position]]></title>
      <url>%2F2016%2F08%2F12%2Fcss-float%2F</url>
      <content type="text"><![CDATA[float在PC网站开发中，浮动布局经常用到。通常在运用浮动的时候，会遇到个问题：父容器无法被子元素的内容撑开。就是由于浮动的子元素脱离了父容器。看下面的例子： html123&lt;div class="warp clearfix"&gt; &lt;div class="left"&gt;left，宽度固定，高度可固定也可以由内容撑开。&lt;/div&gt;&lt;/div&gt; css123456789.warp&#123; background-color: #D66464;&#125;.left&#123; float: left; width: 100px; background: #00f; height: 180px;&#125; 解决办法：①父容器也浮动123.wrap&#123; float:left;&#125; ②清除浮动12345.clearfix:after&#123; content:""; clear:both; display:block&#125; 避免float出现此类问题的方法，用display:inline-block替代float 在使用相对定位position:relative或者绝对定位position:absolute时，如果绝对定位或者相对的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。记住一个“positioned”元素是指position值不是static的元素。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jqGrid表格控件实例]]></title>
      <url>%2F2016%2F08%2F10%2FjqGrid-template%2F</url>
      <content type="text"><![CDATA[jqGrid 是一个用来显示网格数据的jQuery插件，通过使用jqGrid可以轻松实现前端页面与后台数据的ajax异步通信，也可前端页面中本地添加数据。 下面给出一个本地添加数据的实例。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;!--UTF-8编码 --&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;jqGird&lt;/title&gt; &lt;!--加载jquery核心文件 --&gt; &lt;script type="text/javascript" src="../jquery/jquery-1.12.0.min.js"&gt;&lt;/script&gt; &lt;!--加载jqgrid核心文件 --&gt; &lt;script type="text/javascript" src="js/jquery.jqGrid.min.js"&gt;&lt;/script&gt; &lt;!--加载jquery-ui核心文件 --&gt; &lt;script type="text/javascript" src="js/jquery-ui.js"&gt;&lt;/script&gt; &lt;!--加载JqGrid文件 --&gt; &lt;script type="text/javascript" src="js/grid.locale-en.js"&gt;&lt;/script&gt; &lt;!--加载jpgrid ui的样式文件 --&gt; &lt;link rel="stylesheet" type="text/css" media="screen" href="css/ui.jqgrid.css" /&gt; &lt;!--加载jquery ui的样式文件 --&gt; &lt;link rel="stylesheet" type="text/css" media="screen" href="css/jquery-ui.css" /&gt; &lt;!--加载jquery themes的样式文件 --&gt; &lt;link rel="stylesheet" type="text/css" media="screen" href="css/jquery-ui.theme.css" /&gt; &lt;script&gt; $(function() &#123; var $gridTable=$("#gridTable"); $gridTable.jqGrid(&#123; datatype: "local", mtype:"post", height: 250, /*autowidth:true,*/ colNames:['Id','Name','Student','Description'], colModel:[&#123; name:'id', index:'id', width:60, sorttype:"int", hidden:true &#125;, &#123; name:'name', index:'name', width:200, align:"center", sortable:false &#125;,&#123; name:"student", index:"student", width:200, sortable:false, align:"center", formatter: function (cellvalue, options, rowObject) &#123; return strHtml='&lt;select id="select_' +rowObject.id+'"&gt;'+ '&lt;option value=""&gt;Yes&lt;/option&gt;' + '&lt;option value=""&gt;No&lt;/option&gt;' + '&lt;/select&gt; '; &#125; &#125;, &#123; name: 'additionalInfo', index:'additionalInfo', width:200, align:"center" &#125;], onSelectRow: function (id) &#123; var data=$("#select_"+id).find("option:selected").text(); console.log(data); &#125;, multiselect:true, multiboxonly:true, sortname:'id', sortorder:'asc', viewrecords:true, rowNum:10, rowList:[10,20,30], pager:"#gridPager", caption: "List" &#125;).navGrid('#gridPager',&#123;edit:true,add:true,del:true&#125;); /*表格数据*/ var mydata = [ &#123;id:"1",name:"polaris",additionalInfo:"男"&#125;, &#123;id:"2",name:"李四",additionalInfo:"女"&#125;, &#123;id:"3",name:"王五",additionalInfo:"男"&#125;, &#123;id:"4",name:"马六",additionalInfo:"女"&#125;, &#123;id:"5",name:"赵钱",additionalInfo:"男"&#125;, &#123;id:"6",name:"小毛",additionalInfo:"男"&#125;, &#123;id:"7",name:"小李",additionalInfo:"女"&#125;, &#123;id:"8",name:"小三",additionalInfo:"男"&#125;, &#123;id:"9",name:"孙先",additionalInfo:"男"&#125; ]; /*逐行添加数据*/ $.each(mydata, function (i, item) &#123; $gridTable.jqGrid('addRowData',item.id,item); &#125;); /*删除一行数据*/ $gridTable.jqGrid('delRowData',1); /*刷新表格，排序并刷出总页数*/ $gridTable.trigger("reloadGrid"); /*获得选中的多行ID*/ var selectedRowId_array=$gridTable.jqGrid("getGridParam",'selarrrow'); console.log(selectedRowId_array); /*总记录，recount为显示的=rowNum*/ console.log($gridTable.jqGrid("getGridParam",'records')); /*清除表格数据*/ /*jQuery("#gridTable").clearGridData();*/ &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;table id="gridTable"&gt;&lt;/table&gt; &lt;div id="gridPager"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jqGrid下载 中文指南]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[setInterval 轮询]]></title>
      <url>%2F2016%2F08%2F08%2FsetInterval%2F</url>
      <content type="text"><![CDATA[很多时候，在使用$.post向后台请求数据时，如果后台处理数据时间太长，可能会无法完成请求，这时就需要定时查询 12345678var getPostData=function(oAfterGetData)&#123; var e=setInterval(function () &#123; $.post(url,object, function (data) &#123; oAfterGetData(data); clearInterval(e); &#125;,'json') &#125;,1000);&#125; setInterval()—设置定时器 clearInterval()—清除定时器 1000为ms数]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[html notes]]></title>
      <url>%2F2016%2F08%2F07%2FHtml-Reference%2F</url>
      <content type="text"><![CDATA[提示文本tips使用元素的title属性 12&lt;p&gt;&lt;abbr title="世界卫生组织"&gt;WHO&lt;/abbr&gt; 成立于 1948。&lt;/p&gt; &lt;p title="版本控制"&gt;VCS&lt;/p&gt; 页内跳转定义锚 (html5 使用id属性而废弃name) 1&lt;p id="p1"&gt;p1&lt;/p&gt; 跳转到锚 1&lt;a href="#p1"&gt;跳转到p1&lt;a&gt; 跳转到top &lt;a href=&quot;#top&quot;&gt;Top&lt;/a&gt;跳转到顶部(不需定义锚).找不到已定义的命名锚也会跳转到top. &lt;datalist&gt;标签(new) 12345678&lt;input list="browsers"&gt;&lt;datalist id="browsers"&gt; &lt;option value="Internet Explorer"&gt;&lt;/option&gt; &lt;option value="Firefox"&gt;&lt;/option&gt; &lt;option value="Chrome"&gt;&lt;/option&gt; &lt;option value="Opera"&gt;&lt;/option&gt; &lt;option value="Safari"&gt;&lt;/option&gt;&lt;/datalist&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git command reference - list of top git commands]]></title>
      <url>%2F2016%2F08%2F06%2FGit-Reference%2F</url>
      <content type="text"><![CDATA[Every programmer should know about VCS(Version Control System) especially GIT. This post serves as a short reference for most popular GIT commands. They are grouped by functionality and has a short explanation above them.To use them copy any command to your favorite command line tool.And if you wish to learn more about GIT check this out. Table of Contents First Steps Information Staging Committing Branching Combining First StepsFirst thing which we have to do after installing GIT is to setup a name with an email and editor --global option tells to set this variable in the~/.gitconfigrather locally in .git/config. Default is --local which sets options for specific repository. 123git config --global user.name "John Doe"git config --global user.email "johndoe@example.com"git config --global core.editor vim And if you would like to check already existing settings. 1git config --list To get specific value. 1git config &lt;option&gt; To start track specific folder. 1git init To clone remote repository. 1git clone &lt;url&gt; If you need any help, these commands will open man page. verb is command’s name. 123git help &lt;verb&gt;git &lt;verb&gt; --helpman git-&lt;verb&gt; InformationGIT Commands used for getting any kind of information about repository. STATUSTo check status of files 1git status Short version of status. Left column indicates status of the staging area and the right - working tree. M stands for modified, A stands for added, ? - not tracked, ! - ignored files. 12git status -sgit status --short To show ignored files. 1git status --ignored COMPARINGTo compare files in working directory with staging area. Tells you what you changed but not yet staged. 1git diff To see what you staged which goes into your next commit. –staged and –cached are synonyms. 12git diff --stagedgit diff --cached HISTORYOutputs commit history. 1git log Show difference in each commit. 1git log -p Limit output to last entries. 1git log -2 Shows abbreviated stats. 1git log --stat Formats output. oneline - single line, short - adds extra info, full - more info, fulller - even more. 1git log --pretty=oneline You can even format output. 1git log --pretty=format:"%h - %an, %ar : %s Show output since 2 weeks. 1git log --since=2.weeks INSPECTINGShow all blobs and trees where tree points to. 1git ls-tree master^&#123;tree&#125; Show all blobs and trees recursively. t makes show the SHA-1s of the subtrees themselves, rather than just all the blobs. 1git ls-tree -r -t master^&#123;tree&#125; Show what type object is. SHA-1 is an object hash. 1git cat-file -t &lt;SHA-1&gt; StagingStage a file/files for commit. 12git add &lt;file&gt;git add . To remove staged files, but keep it in the working directory. 1git rm --cached &lt;file&gt; To unstage file. Undoes any changes since last commit. 1git reset head &lt;file&gt; Interactive staging 1git add -i CommittingTo commit staged files. 1git commit -m "Commit message" To stage and commit shorthand. 1git commit -a -m "Commit message" Ammend last commit. For example change commit message or add extra files. It will overrides your last commit. 1git commit --amend BranchingCreate new branch. And switch to it. 12git branch &lt;branchName&gt;git checkout &lt;branchName&gt; Create new branch. And switch to it. 1git checkout -b &lt;branchName&gt; Create new branch and track to origin branch.And switch to it. 1git checkout -b &lt;branchName&gt; origin/&lt;branchName&gt; List all branches. 1git branch Delete a branch. 1git branch -d &lt;branchName&gt; Delete remote branch. 1git push origin :&lt;branchName&gt; CombiningCommands for merging and rebasing MERGEMerge a branch into current one. 1git merge &lt;branchName&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2013%2F11%2F06%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy Run Server and debug on port 36001$ hexo s --debug -p 3600 Generate and Deploy1$ hexo d -g More info: Deployment]]></content>
    </entry>

    
  
  
</search>
